<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="566" />
    <option name="newTranslationDialogY" value="382" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="The snapping position aligns at the top part of the grabbing content" />
      <item value="When given a scroll controller that is attached to scrollable view, e.g [ListView] or a [SingleChildScrollView], the sheet will naturally grow and shrink according to the current scroll position of that view. OBS, the scrollable view needs to have the [reverse] parameter set to false if located in the below sheet and true if located in the above sheet. Otherwise, the logic do not behave as intended." />
      <item value="The snapping position alignment regarding the grabbing content. This is often used when you want a snapping position at the top or bottom of the screen, but want the entire grabbing widget to be visible. For example, if you have a snapping position at the top of the screen, you usually use [GrabbingContentOffset.bottom]. See example: ```dart SnappingPosition.factor( positionFactor: 1.0, grabbingContentOffset: GrabbingContentOffset.bottom, ), ``` Or if you have a snapping position at the bottom of the screen, you usually use [GrabbingContentOffset.bottom]. See example: ```dart SnappingPosition.factor( positionFactor: 0.0, grabbingContentOffset: GrabbingContentOffset.top, ), ```" />
      <item value="grabbing" />
      <item value="snappint" />
      <item value="latitude" />
      <item value="lowering" />
      <item value="Whether to consume any [WindowInsetsCompat]s which are dispatched to the host view. Defaults to `true`." />
      <item value="With Out" />
      <item value="display Cutout" />
      <item value="ime" />
      <item value="Applies any [WindowInsetsCompat] values to [LocalWindowInsets], which are then available within [content]. If you're using this in fragments, you may wish to take a look at [ViewWindowInsetObserver] for a more optimal solution. @param windowInsetsAnimationsEnabled Whether to listen for [WindowInsetsAnimation]s, such as IME animations. @param consumeWindowInsets Whether to consume any [WindowInsetsCompat]s which are dispatched to the host view. Defaults to `true`." />
      <item value="Obsolete Sdk Int" />
      <item value="variant" />
      <item value="语言" />
      <item value="泰语" />
      <item value="GERMAN" />
      <item value="GERMANY" />
      <item value="ITALIAN" />
      <item value="JAPANESE" />
      <item value="KOREA" />
      <item value="KOREAN" />
      <item value="TRADITIONAL CHINESE" />
      <item value="Returns a new persistent list with the specified element inserted at the specified index." />
      <item value="parallax" />
      <item value="protocol" />
      <item value="INTERNET" />
      <item value="AUTHENTICATION AGENT ERROR" />
      <item value="Wildcards" />
      <item value="Provide a Key used for the initial load for the next PagingSource due to invalidation of this PagingSource. The Key is provided to load via LoadParams.key. The Key returned by this method should cause load to load enough items to fill the viewport around the last accessed position, allowing the next generation to transparently animate in. The last accessed position can be retrieved via state.anchorPosition, which is typically the top-most or bottom-most item in the viewport due to access being triggered by binding items as they scroll into view. For example, if items are loaded based on integer position keys, you can return state.anchorPosition. Alternately, if items contain a key used to load, get the key from the item in the page at index state.anchorPosition. Params: state - PagingState of the currently fetched data, which includes the most recently accessed position in the list via PagingState.anchorPosition. Returns: Key passed to load after invalidation used for initial load of the next generation. The Key returned by getRefreshKey should load pages centered around user's current viewport. If the correct Key cannot be determined, null can be returned to allow load decide what default key to use." />
      <item value="reverse Layout" />
      <item value="typography" />
      <item value="总是" />
      <item value="On every successful composition, update the callback with the `enabled` value" />
      <item value="propagate Min Constraints" />
      <item value="合作" />
      <item value="tracking" />
      <item value="audit" />
      <item value="销售" />
      <item value="报名" />
      <item value="is Applyed" />
      <item value="is Mine" />
      <item value="留言" />
      <item value="提现" />
      <item value="名片" />
      <item value="商" />
      <item value="Regist" />
      <item value="粘滞" />
      <item value="邀请" />
      <item value="工单" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="939" />
        <entry key="ENGLISH" value="940" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BOSNIAN" value="1" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="DANISH" value="4" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="BENGALI" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1645426867554" />
  </component>
</application>