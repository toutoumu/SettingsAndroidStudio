<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="566" />
    <option name="newTranslationDialogY" value="382" />
    <histories>
      <item value="If the home property is specified, the routes table cannot include an entry for &quot;&quot;, since it would be redundant." />
      <item value="Diagnosticable" />
      <item value="Waits for multiple futures to complete and collects their results. Returns a future which will complete once all the provided futures have completed, either with their results, or with an error if any of the provided futures fail. The value of the returned future will be a list of all the values that were produced in the order that the futures are provided by iterating [futures]. If any future completes with an error, then the returned future completes with that error. If further futures also complete with errors, those errors are discarded. If `eagerError` is true, the returned future completes with an error immediately on the first error from one of the futures. Otherwise all futures must complete before the returned future is completed (still with the first error; the remaining errors are silently dropped). In the case of an error, [cleanUp] (if provided), is invoked on any non-null result of successful futures. This makes it possible to `cleanUp` resources that would otherwise be lost (since the returned future does not provide access to these values). The [cleanUp] function is unused if there is no error. The call to [cleanUp] should not throw. If it does, the error will be an uncaught asynchronous error." />
      <item value="Waits for multiple futures to complete and collects their results." />
      <item value="PREFER SETTINGS" />
      <item value="FAIL ON PROJECT REPOS" />
      <item value="SUBSAMPLING" />
      <item value="ACCESS LOCATION EXTRA COMMANDS" />
      <item value="Langurage" />
      <item value="start Time Us" />
      <item value="send Next When Last Success" />
      <item value="interval Between Two Package" />
      <item value="TERMINATE LOCAL HOST" />
      <item value="This method replaces the {@link BleManagershouldAutoConnect()} method. &lt;p&gt; Sets whether to connect to the remote device just once (false) or to add the address to white list of devices that will be automatically connect as soon as they become available (true). In the latter case, if Bluetooth adapter is enabled, Android scans periodically for devices from the white list and, if an advertising packet is received from such, it tries to connect to it. When the connection is lost, the system will keep trying to reconnect to it. If method is called with parameter set to true, and the connection to the device is lost, the {@link BleManagerCallbacksonLinkLossOccurred(BluetoothDevice)} callback is called instead of {@link BleManagerCallbacksonDeviceDisconnected(BluetoothDevice)}. &lt;p&gt; This feature works much better on newer Android phone models and may have issues on older phones. &lt;p&gt; This method should only be used with bonded devices, as otherwise the device may change it's address. It will however work also with non-bonded devices with private static address. A connection attempt to a non-bonded device with private resolvable address will fail. &lt;p&gt; The first connection to a device will always be created with autoConnect flag to false (see {@link BluetoothDeviceconnectGatt(Context, boolean, BluetoothGattCallback)}). This is to make it quick as the user most probably waits for a quick response. If autoConnect is used (true), the following connections will be done using {@link BluetoothGattconnect()}, which forces the autoConnect parameter to true. @param autoConnect true to use autoConnect feature on the second and following connections. The first connection is always done with autoConnect parameter equal to false, to make it faster and allow to timeout it the device is unreachable. Default value is false. @return The request." />
      <item value="Closes and releases resources. This method will be called automatically after calling disconnect(). When the device disconnected with link loss and ConnectRequest.shouldAutoConnect() returned true you have to call this method to close the connection." />
      <item value="REASON CANCELLED" />
      <item value="set Report Delay" />
      <item value="multiple" />
      <item value="bonded" />
      <item value="Closes and releases resources. This method will be called automatically after calling {@link disconnect()}. When the device disconnected with link loss and {@link ConnectRequestshouldAutoConnect()} returned true you have to call this method to close the connection." />
      <item value="begin Atomic Request Queue" />
      <item value="This method should nullify all services and characteristics of the device. &lt;p&gt; It's called when the device is no longer connected, either due to user action or a link loss, or when the services have changed and new service discovery will be performed." />
      <item value="on Services Invalidated" />
      <item value="Connects with a Bluetooth LE GATT service and takes care of its notifications. The service runs as a foreground service, which is generally required so that it can run even while the containing app has no UI. It is also possible to have the service started up as part of the OS boot sequence using code similar to the following: &lt;pre&gt; class OsNotificationReceiver : BroadcastReceiver() { override fun onReceive(context: Context?, intent: Intent?) { when (intent?.action) { Start our Gatt service as a result of the system booting up Intent.ACTION_BOOT_COMPLETED -&gt; { context?.startForegroundService(Intent(context, GattService::class.java)) } } } } &lt;pre&gt;" />
      <item value="Copyright (c) 2020, Nordic Semiconductor All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation andor other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
      <item value="PLANE" />
      <item value="convert Ble Device" />
      <item value="request Connection Priority" />
      <item value="temp" />
      <item value="Host\n Certification" />
      <item value="Preferred" />
      <item value="set Preferred Orientations" />
      <item value="The snapping position aligns at the top part of the grabbing content" />
      <item value="When given a scroll controller that is attached to scrollable view, e.g [ListView] or a [SingleChildScrollView], the sheet will naturally grow and shrink according to the current scroll position of that view. OBS, the scrollable view needs to have the [reverse] parameter set to false if located in the below sheet and true if located in the above sheet. Otherwise, the logic do not behave as intended." />
      <item value="The snapping position alignment regarding the grabbing content. This is often used when you want a snapping position at the top or bottom of the screen, but want the entire grabbing widget to be visible. For example, if you have a snapping position at the top of the screen, you usually use [GrabbingContentOffset.bottom]. See example: ```dart SnappingPosition.factor( positionFactor: 1.0, grabbingContentOffset: GrabbingContentOffset.bottom, ), ``` Or if you have a snapping position at the bottom of the screen, you usually use [GrabbingContentOffset.bottom]. See example: ```dart SnappingPosition.factor( positionFactor: 0.0, grabbingContentOffset: GrabbingContentOffset.top, ), ```" />
      <item value="grabbing" />
      <item value="snappint" />
      <item value="latitude" />
      <item value="lowering" />
      <item value="Whether to consume any [WindowInsetsCompat]s which are dispatched to the host view. Defaults to `true`." />
      <item value="With Out" />
      <item value="display Cutout" />
      <item value="ime" />
      <item value="Applies any [WindowInsetsCompat] values to [LocalWindowInsets], which are then available within [content]. If you're using this in fragments, you may wish to take a look at [ViewWindowInsetObserver] for a more optimal solution. @param windowInsetsAnimationsEnabled Whether to listen for [WindowInsetsAnimation]s, such as IME animations. @param consumeWindowInsets Whether to consume any [WindowInsetsCompat]s which are dispatched to the host view. Defaults to `true`." />
      <item value="Obsolete Sdk Int" />
      <item value="variant" />
      <item value="语言" />
      <item value="泰语" />
      <item value="GERMAN" />
      <item value="GERMANY" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="970" />
        <entry key="ENGLISH" value="971" />
        <entry key="ESTONIAN" value="1" />
        <entry key="ICELANDIC" value="2" />
        <entry key="BOSNIAN" value="1" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="DANISH" value="4" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="BENGALI" value="2" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1653976118024" />
  </component>
</application>