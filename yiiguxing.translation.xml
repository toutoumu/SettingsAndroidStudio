<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="566" />
    <option name="newTranslationDialogY" value="382" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="You only need to call this method if you need the binding to be initialized before calling [runApp]." />
      <item value="microseconds" />
      <item value="milliseconds" />
      <item value="Zero is at the bottom and positive values are above it: `⇈` Alphabetical content with a [GrowthDirection.forward] would have the A at the bottom and the Z at the top. This is an unusual configuration." />
      <item value="axis Direction" />
      <item value="This app needs access to location when open and in the background." />
      <item value="This app needs access to location when in the background." />
      <item value="This app needs access to location in the background." />
      <item value="NS Location When In Use Usage Description" />
      <item value="base Url协议" />
      <item value="Repaint Boundary" />
      <item value="The extent of each tile in the main axis. If provided it would define the logical pixels taken by each tile in the main-axis." />
      <item value="indicator Decoration" />
      <item value="line Connector Decoration" />
      <item value="Creates a snapping position that is given a positionFactor [positionFactor]: 1 = Full size; 0 = Smallest size. Can be bigger than 1 and smaller than 0 if that is wanted." />
      <item value="This sets the position of the snapping sheet directly without any animation. To use animation, see the [snapToPosition] method." />
      <item value="Add your grabbing widget here," />
      <item value="maintain Back Layer State" />
      <item value="reveal Back Layer At Start" />
      <item value="Rectang" />
      <item value="Rectangle" />
      <item value="circular" />
      <item value="Creates a border radius where all radii are [Radius.circular(radius)]." />
      <item value="The minimum size of the button itself. The size of the rectangle the button lies within may be larger per [tapTargetSize]. This value must be less than or equal to [maximumSize]." />
      <item value="side" />
      <item value="UNIDENTIFIED" />
      <item value="Cubit" />
      <item value="Comsummer" />
      <item value="Gem files will remain installed in" />
      <item value="Clip Oval" />
      <item value="obscure Text" />
      <item value="periodic" />
      <item value="{@macro flutter.widgets.widgetsApp.builder} Material specific features such as [showDialog] and [showMenu], and widgets such as [Tooltip], [PopupMenuButton], also require a [Navigator] to properly function." />
      <item value="Makes `Counter` readable inside the devtools by listing all of its properties" />
      <item value="Declare the preferred height of the content to match the height of the navigation bars when present at the bottom of the screen. This is very handy when used with `Spacer` to push content below the navigation bars: ``` Column { Content to be drawn above status bars (y-axis) Spacer(Modifier.navigationBarHeight()) } ``` It's also useful when used to draw a scrim which matches the navigation bars: ``` Spacer( Modifier.navigationBarHeight() .fillMaxWidth() .drawBackground(MaterialTheme.colors.background.copy(alpha = 0.3f) ) ``` Internally this matches the behavior of the [Modifier.height] modifier." />
      <item value="Apply additional space which matches the height of the status bars height along the top edge of the content." />
      <item value="velocity" />
      <item value="shrink Towards" />
      <item value="Tween Spec" />
      <item value="duration Millis" />
      <item value="PROVICE" />
      <item value="Lots" />
      <item value="Prking Item" />
      <item value="隐私政策" />
      <item value="Combines cells with adaptive number of rows or columns. It will try to position as many rows or columns as possible on the condition that every cell has at least [minSize] space and all extra space distributed evenly. For example, for the vertical [LazyVerticalGrid] Adaptive(20.dp) would mean that there will be as many columns as possible and every column will be at least 20.dp and all the columns will have equal width. If the screen is 88.dp wide then there will be 4 columns 22.dp each." />
      <item value="An effect for handling presses of the system back button. Calling this in your composable adds the given lambda to the [OnBackPressedDispatcher] of the [LocalOnBackPressedDispatcherOwner]. If this is called by nested composables, if enabled, the inner most composable will consume the call to system back and invoke its lambda. The call will continue to propagate up until it finds an enabled BackHandler. @sample androidx.activity.compose.samples.BackHandler @param enabled if this BackHandler should be enabled @param onBack the action invoked by pressing the system back" />
      <item value="Caches the [PagingData] such that any downstream collection from this flow will share the same [PagingData]. The flow is kept active as long as the given [scope] is active. To avoid leaks, make sure to use a [scope] that is already managed (like a ViewModel scope) or manually cancel it when you don't need paging anymore. A common use case for this caching is to cache [PagingData] in a ViewModel. This can ensure that, upon configuration change (e.g. rotation), then new Activity will receive the existing data immediately rather than fetching it from scratch. Calling [cachedIn] is required to allow calling [submitData][androidx.paging.AsyncPagingDataAdapter] on the same instance of [PagingData] emitted by [Pager] or any of its transformed derivatives, as reloading data from scratch on the same generation of [PagingData] is an unsupported operation. Note that this does not turn the `Flow&lt;PagingData&gt;` into a hot stream. It won't execute any unnecessary code unless it is being collected." />
      <item value="repository" />
      <item value="coroutine" />
      <item value="Onboarding" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="895" />
        <entry key="ENGLISH" value="896" />
        <entry key="ESTONIAN" value="1" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="DANISH" value="4" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="DUTCH" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="BENGALI" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1632408292463" />
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
  </component>
</application>