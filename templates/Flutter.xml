<templateSet group="Flutter">
  <template name="asset" value="Image.asset(&quot;$asset$&quot;)," description="Image.asset(&quot;name&quot;)," toReformat="false" toShortenFQNames="true">
    <variable name="asset" expression="" defaultValue="&quot;asset&quot;" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiistless" value="class $NAME$ extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="iiistful" value="class $NAME$ extends StatefulWidget {&#10;  @override&#10;  _$NAME$State createState() =&gt; _$NAME$State();&#10;}&#10;&#10;class _$NAME$State extends State&lt;$NAME$&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateful widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="futureBldr" value="FutureBuilder(&#10;    future: $FUTURE$,&#10;    builder: (BuildContext context, AsyncSnapshot snapshot) {&#10;        if (snapshot.hasData) {&#10;            return $WIDGET$;&#10;        } else if (snapshot.hasError) {&#10;            return $ERRORWIDGET$&#10;        } else {&#10;            return $LOADINGWIDGET$&#10;        }&#10; })" description="Create FutureBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="FUTURE" expression="&quot;future&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="&quot;widgetToBuild&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="ERRORWIDGET" expression="&quot;Icon(Icons.error_outline);&quot;" defaultValue="&quot;Icon(Icons.error_outline),&quot;" alwaysStopAt="true" />
    <variable name="LOADINGWIDGET" expression="&quot;CircularProgressIndicator();&quot;" defaultValue="&quot;CircularProgressIndicator()&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="showDialog" value="showDialog&lt;void&gt;(&#10;context: $context$,&#10;barrierDismissible: $dismiss$, // false = user must tap button, true = tap outside dialog&#10;builder: (BuildContext dialogContext){&#10;return AlertDialog(&#10;title: Text('$title$'),&#10;content: Text('$content$'),&#10;actions: &lt;Widget&gt;[&#10;FlatButton(&#10;child: Text('$buttonText$'),&#10;onPressed: () {&#10;Navigator.of(dialogContext).pop(); // Dismiss alert dialog&#10;},&#10;),&#10;],&#10;);&#10;},&#10;);" description="New AlertDialog" toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="&quot;context&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="dismiss" expression="&quot;barrierDismissible&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="title" expression="&quot;title&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="content" expression="&quot;dialogBody&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="buttonText" expression="&quot;buttonText&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="column" value="Column(&#10;  children: &lt;Widget&gt;[$goto$],&#10;)," description="Create Column Widget" toReformat="true" toShortenFQNames="true">
    <variable name="goto" expression="&quot;&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="build" value="@override &#10; Widget build(BuildContext context) { &#10; return $body$; &#10;}&#10;" description="No Such Method" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>