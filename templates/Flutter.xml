<templateSet group="Flutter">
  <template name="asset" value="Image.asset(&quot;$asset$&quot;)," description="Image.asset(&quot;name&quot;)," toReformat="false" toShortenFQNames="true">
    <variable name="asset" expression="" defaultValue="&quot;asset&quot;" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iiistless" value="class $NAME$ extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="iiistful" value="class $NAME$ extends StatefulWidget {&#10;  @override&#10;  _$NAME$State createState() =&gt; _$NAME$State();&#10;}&#10;&#10;class _$NAME$State extends State&lt;$NAME$&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Container($END$);&#10;  }&#10;}&#10;" description="New Stateful widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="futureBldr" value="FutureBuilder(&#10;    future: $FUTURE$,&#10;    builder: (BuildContext context, AsyncSnapshot snapshot) {&#10;        if (snapshot.hasData) {&#10;            return $WIDGET$;&#10;        } else if (snapshot.hasError) {&#10;            return $ERRORWIDGET$&#10;        } else {&#10;            return $LOADINGWIDGET$&#10;        }&#10; })" description="Create FutureBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="FUTURE" expression="&quot;future&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="&quot;widgetToBuild&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="ERRORWIDGET" expression="&quot;Icon(Icons.error_outline);&quot;" defaultValue="&quot;Icon(Icons.error_outline),&quot;" alwaysStopAt="true" />
    <variable name="LOADINGWIDGET" expression="&quot;CircularProgressIndicator();&quot;" defaultValue="&quot;CircularProgressIndicator()&quot;" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>